#!/bin/bash

# Created by Robert Edward Steckroth II, RobertSteckroth@gmail.com

juju-log "Setting up Django-rainbow with project $JUJU_REMOTE_UNIT."

juju-log "Retreiving project repository credentials."
app_type=`relation-get app_source_type`
app_url=`relation-get app_source_url`
app_uname=`relation-get app_source_uname`
app_pass=`relation-get app_source_pass`
app_vhost=`relation-get app_source_vhost`
stripe_additional_debian_packages=`relation-get stripe_additional_debian_packages`
stripe_additional_pip_packages=`relation-get stripe_additional_pip_packages`


# Need these. Exit until I get them from the stripe. Juju automatically does this
# intill they are non-empty
if [ -z "$app_type" ]; then
     exit 0;
fi


# Install these if the user defined any in the stripe config.yaml file
if [ "$stripe_additional_debian_packages" ]; then
    juju-log "Installing extra debian packages: $stripe_additional_debian_packages"
    sudo apt-get -y install $stripe_additional_debian_packages
fi

if [ "$stripe_additional_pip_packages" ]; then
    juju-log "Installing extra pip packages: $stripe_additional_pip_packages"
    sudo pip install $stripe_additional_pip_packages
fi


repo_dir=""
# Check /var/django_rainbow/installed_repos for current settings of stripe repository
juju-log "Checking for stored project settings."
if ! [ -e "/var/django_rainbow/installed_repos" ]; then
       juju-log "No stored project setting were detected."
       mkdir /var/django_rainbow
       touch /var/django_rainbow/installed_repos
else
           while read stored_settings; do
               repo_url="$(echo $stored_settings | sed 's/.*\^\*\^\(.*\)/\1/g')"
               repo_dir="$(echo $stored_settings | sed 's/\(.*\)\^\*\^.*/\1/g')"
               if [ "$repo_url" = "$app_url" ]; then
                    juju-log "Found repository at $repo_dir" 
                    break;
               fi
               repo_dir=""
           done </var/django_rainbow/installed_repos
fi
# If repo_dir is empty then this is the first time it will be pulled
# and needs to be pulled to the temp directory --> /var/django_rainbow/temp_repo
# It will then be moved to the directory defined in it's own data
# This only happens once. After this the directory will be defined in -->
# /var/django_rainbow/installed_repos


     if [ -e "/var/django_rainbow/vhost_temp" ]; then
          rm /var/django_rainbow/vhost_temp
     fi
     juju-log "Creating virtual host file."
     echo -e "$app_vhost \neof" | while read line; do
        if [ "$line" = "eof" ]; then
               break;
        fi
        echo $line >> /var/django_rainbow/vhost_temp
     done;


if [ -z "$repo_dir" ]; then
     juju-log "Repository not found on server. Logging the new settings."
     # Only supports mercurial. Need to have bzr, git, and svn.
     # Fetch the project directory from the virtual host DocumentRoot setting

     repo_dir="$(cat /var/django_rainbow/vhost_temp | grep "DocumentRoot" | sed 's/\ *DocumentRoot\ *\(.*\)\ */\1/g')"
     # Log the new repository locations
     echo "$repo_dir""^*^""$app_url" >> /var/django_rainbow/installed_repos
     if ! [ -e "$repo_dir" ]; then
            mkdir -p $repo_dir
     fi
     cd $repo_dir
     if [ "$app_type" = "hg" ]; then
          hg init
# This will preset the hg init with user and password. Juju cannot accept user input.
# Keep this echo text to the left. It will be copied to the file this way.
echo '[paths]
default = '"$app_url"'
[auth]
bb.prefix = https://bitbucket.org
bb.username = '"$app_uname"'
bb.password = '"$app_pass"'' > .hg/hgrc
       juju-log "Pulling project for the first time from repository $app_url."
       hg pull
       hg update
     fi # Endo if [ "$app_type" = "hg" ]; then
else
     # cd to the directory listed in the DocumentRoot of the provided virtual host in the stripe
     cd $repo_dir
     juju-log "Updating any project commits from repository $app_url."
     hg pull
     hg update
fi # Endo if [ -z "$repo_dir" ]; then

# Store the name of the directory which conatins the settings.py file
# as the project name
app_source_package_name="$(find . -iname 'settings.py' | sed 's/.*\/\(.*\)\/settings.py/\1/g')"
# This is the absolute path to the setting.py file for the striped Django project
app_source_directory="$(find . -name 'settings.py' | sed 's/\(.*\)\/settings.py/\1/g')"

juju-log "Retreiving project database credentials."

# Parse the project settings.py file for information
database_engine="$(cat $(find . -name 'settings.py') | grep -xv " *#.*" | grep ".*ENGINE'\ *:.*" | sed 's/#.*//g' | sed "s/.*ENGINE' *\: *\(.*\) *\, */\1/g" | sed "s/'//g" | sed 's/.*backends\.\(.*\)/\1/g')"
database_name="$(cat $(find . -name 'settings.py') | grep -xv " *#.*" | grep ".*NAME'\ *:.*" | sed 's/#.*//g' | sed "s/.*NAME' *\: *\(.*\) *\, */\1/g" | sed "s/'//g")" 
database_user="$(cat $(find . -name 'settings.py') | grep -xv " *#.*" | grep ".*USER'\ *:.*" | sed 's/#.*//g' | sed "s/.*USER' *\: *\(.*\) *\, */\1/g" | sed "s/'//g")" 
database_pass="$(cat $(find . -name 'settings.py') | grep -xv " *#.*" | grep ".*PASSWORD'\ *:.*" | sed 's/#.*//g' | sed "s/.*PASSWORD' *\: *\(.*\) *\, */\1/g" | sed "s/'//g")" 
database_host="$(cat $(find . -name 'settings.py') | grep -xv " *#.*" | grep ".*HOST'\ *:.*" | sed 's/#.*//g' | sed "s/.*HOST' *\: *\(.*\) *\, */\1/g" | sed "s/'//g")" 
# Todo: Figure the Django port thing out with databases
#database_port="$(cat $(find . -name 'settings.py') | grep -xv " *#.*" | grep ".*PORT'\ *:.*" | sed 's/#.*//g' | sed "s/.*PORT' *\: *\(.*\) *\, */\1/g" | sed "s/'//g")" 

# maybe we'll get some multiple site control
site_id="$(cat $(find . -name 'settings.py') | grep -xv " *#.*" | grep ".*SITE_ID\ *=.*" | sed 's/#.*//g' | sed "s/.*SITE_ID *\= *\(.*\) */\1/g" | sed "s/'//g")"
#echo "from django.contrib.sites.models import Site; Site.objects.create(pk=$site_id, domain='here.example.com', name='example.com')" | python manage.py shell
# For now, just gonna put in a place holder if the user has listed it in installed_apps
sites_used="$(cat $(find . -name 'settings.py') | grep -xv " *#.*" | grep ".*django.contrib.sites.*" | sed 's/#.*//g')"

if [ "$database_engine" != "mysql" ]; then
     juju-log "Critical error. Django-rainbow only supports mysql but project $app_source_package_name uses $database_engine as its database engine"
     exit 9;
fi

if [ -z "$database_host" ]; then
     database_host="localhost"
#       database_host=`unit-get private-address`
fi

open-port 80/tcp

cp /var/django_rainbow/vhost_temp /etc/apache2/sites-available/vhost_$app_source_package_name

# Get the mysql password that was generated by the install hook
password=`cat /var/lib/juju/mysql.passwd`

# This is causing prolems with the repo pull, owner permissions needs to be a trusted user.
# chown -R www-data "$repo_dir"
cd $app_source_directory

# Put a single site into the django_site table
site_domain="example.com"
site_name="www.example.com"

if [ -n "$sites_used" ]; then
     juju-log "Found django.contrib.sites in installed apps. Creating single table as defined in this script."
     echo "from django.contrib.sites.models import Site; entry = Site.objects.get(pk=$site_id); entry.objects.all().delete(); Site.objects.create(pk=$site_id, domain='$site_domain', name='$site_name')" | python manage.py shell
fi

# Determine if a database needs to be created for this service
existing_databases=`mysql --user="root" --password="$password" --silent --execute 'show databases'`

for db in $existing_databases; do
    if [ "$db" = "$database_name" ]; then
        juju-log "Database already exists, publishing details and exiting"
        if ( ! python manage.py syncdb 2> /dev/null ); then
             juju-log "Unable to sync database $database_name with project. Re-issuing credentials."
             echo "grant all on $database_name.* to '$database_user'@'$database_host' identified by '$database_pass'" | mysql --password="$password" --database="$database_name"
             if ( ! python manage.py syncdb ); then
                  juju-log "Unable to set username and password from Django project. Quitting."
                  exit 9;
             fi
        fi
        a2ensite vhost_$app_source_package_name
        apache2ctl -k graceful
        # All done, no need to create the database below.
        exit 0; 
    fi
done

# Create new database and corresponding security settings for stripe
juju-log "Creating new database and corresponding security settings"
mysqladmin --password="$password" create "$database_name"
echo "grant all on $database_name.* to '$database_user'@'$database_host' identified by '$database_pass'" | mysql --password="$password" --database="$database_name"

# Change this so it can support removing databases and users with config options -->
#mysqladmin --password="$password" flush-privileges
python manage.py syncdb 
a2ensite vhost_$app_source_package_name
apache2ctl -k graceful

