#!/bin/bash

# Created by Robert Edward Steckroth II, RobertSteckroth@gmail.com
set -e # -x for verbose logging to juju debug-log

juju-log "Integrating project with django-rainbow."
revision_trigger="$(config-get revision)"
app_type="$(config-get project-repo-type)"
app_url="$(config-get project-repo-url)"
app_uname="$(config-get project-repo-username)"
app_pass="$(config-get project-repo-password)"
app_vhost="$(config-get --format smart project-apache2-vhost)"

debian_packages="$(config-get apt-get-packages)"
pip_packages="$(config-get pip-packages)"
bzr_packages="$(config-get bzr-packages)"
git_packages="$(config-get git-packages)"
hg_packages="$(config-get hg-packages)"
tar_packages="$(config-get tar-packages)"

project_site_domain="$(config-get project-site-domain)"
project_site_name="$(config-get project-site-name)"
package_directory="$(config-get rainbow-installation-directory)"
update_database="$(config-get always-update-database)"
update_sites="$(config-get always-update-sites-framework)"


juju-log "Running revision $revision_trigger"
log_file_rev="$package_directory/logs/config_changed_revision_$revision_trigger.log"

function install_package {

py_install="$(find . -name 'setup.py' | head -1 | sed 's/setup\.py//g')"
binary_install="$(find . -name 'configure' | head -1 | sed 's/configure//g')"

if [ -z "$py_install" -a -z "$binary_install" ]; then
     juju-log "Could not find a setup.py or configure script to install with at directory $package_directory/site_packages/$1" 
     return;
elif [ ${#py_install} -gt ${#binary_install} -a -n "$binary_install" -o -z "$py_install" ]; then
     # This will use configure, make, make install if it finds a configure script
     # lower in the directory tree than a setup.py.
     cd $binary_install
     ( ! ./configure 2>> $log_file_rev ) && juju-log "Could not run configure command at directory $package_directory/site_packages/$1" 
     ( ! make 2>> $log_file_rev ) && juju-log "Could not run make command at directory $package_directory/site_packages/$1" 
     ( ! make install 2>> $log_file_rev ) && juju-log "Could not run make install command at directory $package_directory/site_packages/$1" 
else
     # Install with setup.py because it is found lower in the package directory tree"
     cd $py_install
     ( ! python setup.py install 2>> $log_file_rev ) && juju-log "Could install bzip package $1 while running python setup.py install"
fi
# cd back into the base packages directory for another install
cd $package_directory/site_packages

}

# Erase data if exists and poplulate the temp file for listed packages
echo "" > $package_directory/rainbow.conf/newly_installed_packages
for pkg in $debian_packages; do
    echo "$pkg" >> $package_directory/rainbow.conf/newly_installed_packages
done

new_list="$(comm -13 <(sort $package_directory/rainbow.conf/installed_packages) <(sort $package_directory/rainbow.conf/newly_installed_packages))"

for package_entry in $new_list; do
    echo $package_entry >> $package_directory/rainbow.conf/installed_packages
done

if [ -n "$debian_packages" ]; then
     juju-log "Installing debian packages: $debian_packages"
     apt-get -qqy install $debian_packages
fi


cd $package_directory/site_packages

juju-log "Installing baazar packages..."
for bzr_repo in $bzr_packages; do
    [ -z "$bzr_repo" ] && continue
    bzr_repo_name="$(echo $bzr_repo | sed 's/.*lp:\(.*\)/\1/g' | sed 's/\ //g')"
    [ -e "$bzr_repo_name" ] && continue
    mkdir -p $bzr_repo_name
    cd $bzr_repo_name
    ( ! bzr branch $bzr_repo 2>> $log_file_rev ) && juju-log "Unable to branch bzr repository $bzr_repo"
    install_package $bzr_repo_name
done;

juju-log "Installing git packages..."
for git_repo in $git_packages; do
    [ -z "$git_repo" ] && continue
    git_repo_name="$(echo $git_repo | sed 's/.*\/\(.*\)\.git/\1/g' | sed 's/\ //g')"
    [ -e "$git_repo_name" ] && continue
    mkdir -p $git_repo_name
    cd $git_repo_name
    ( ! git clone $git_repo 2>> $log_file_rev ) && juju-log "Unable to git clone repository $git_repo"
    install_package $git_repo_name
done;

juju-log "Installing mercurial packages..."
for hg_repo in $hg_packages; do
    [ -z "$hg_repo" ] && continue
    hg_repo_name="$(echo $git_repo | sed 's/.*\/\(.*\)\.git/\1/g' | sed 's/\ //g')"
    [ -e "$hg_repo_name" ] && continue
    mkdir -p $hg_repo_name
    cd $hg_repo_name
    ( ! hg clone $hg_repo 2>> $log_file_rev ) && juju-log "Unable to git clone repository $hg_repo"
    install_package $hg_repo_name
done;

juju-log "Installing tarball packages..."
for tar_repo in $tar_packages; do
    [ -z "$tar_repo" ] && continue
    tar_repo_name="$(echo $tar_repo | sed 's/.*[\/]\(.*\)/\1/g' | sed 's/\ //g')"
    [ -e "$tar_repo_name" ] && continue
    mkdir -p $tar_repo_name
    cd $tar_repo_name
    ( ! wget $tar_repo 2>> $log_file_rev ) && juju-log "Unable to retrieve tar compressed file $tar_repo"
    ( ! tar xjf * 2>> $log_file_rev && ! tar xzf * 2>> $log_file_rev && ! tar xf * 2>> $log_file_rev ) && juju-log "Unable to extract file $tar_repo" 
    install_package $tar_repo_name
done;


if [ -z "$app_type" -o -z "$app_url" -o -z "$app_vhost" ]; then
     juju-log "Not enough configuration settings to proceed with project installation, halting."
     juju-log "Django-rainbow needs the following options in [config.yaml] or [your-project.yaml] to install a django app: project-repo-url, project-repo-type, and: project-repo-username, project-repo-password (for private repositorys)."
     exit 0;
fi

# true or false variable to tell us if a repository needs to have an entry in storred_settings.
need_stored_entry=false

# Check $package_directory/rainbow.conf/installed_projects for current settings of project repository
# Parse through our custom file which holds the URL and local directory of the project
repo_dir=""
repo_url=""
repo_modifiy_time=""
while read stored_settings; do
      repo_dir="$(echo $stored_settings | cut -d' ' -f1)"
      repo_url="$(echo $stored_settings | cut -d' ' -f2)"
      repo_modifiy_time="$(echo $stored_settings | cut -d' ' -f3)"
      [ "$repo_url" = "$app_url" ] && break || repo_dir=""
done < $package_directory/rainbow.conf/installed_projects

# empty the temporary vhost file
echo '' > $package_directory/rainbow.conf/latest_vhost

juju-log "Creating virtual host file."
echo -e "$app_vhost \neof" | while read line; do
     [ "$line" = "eof" ] && break
     echo $line >> $package_directory/rainbow.conf/latest_vhost
done;

# Install a new repository if the $repo_dir is not in the stored_settings
if [ -z "$repo_dir" ]; then
     need_stored_entry=true
     repo_url=""
     repo_modifiy_time=""
     juju-log "Project repository not found on instance. Logging the new project data."
     # Only supports mercurial. Need to have bzr, git, and svn.
     # Fetch the project directory from the virtual host DocumentRoot setting
     repo_dir="$(cat $package_directory/rainbow.conf/latest_vhost | grep -xv " *#.*" | grep ".*DocumentRoot\ *" | sed 's/#.*//g' | sed 's/\ *DocumentRoot\ *//g')"
     ! [ -d "$repo_dir" ] && mkdir -p $repo_dir

     if [ "$app_type" = "hg" ]; then
          cd $repo_dir
          ( ! hg init 2>> $log_file_rev ) && juju-log "Error running a hg init command. This is probably due to altered/corrupted data in $package_directory/rainbow.conf/installed_projects. We should continue working properly however."
# This will preset the hg init with user and password. Juju cannot accept user input. Keep this echo text to the left. It will be copied to the file this way.
echo '[paths]
default = '"$app_url"'
[auth]
bb.prefix = https://bitbucket.org
bb.username = '"$app_uname"'
bb.password = '"$app_pass"'' > .hg/hgrc
      fi # Endo if [ "$app_type" = "hg" ]; then

fi # Endo if [ -z "$repo_dir" ]; then

# Update the project according to the repository types here
cd $repo_dir
if [ "$app_type" = "hg" ]; then
     juju-log "Pulling and updating project from repository $app_url"
     if ( ! hg pull 2>> $log_file_rev || ! hg update -C 2>> $log_file_rev ); then
          juju-log "Could not fetch repository from $app_url"
          exit 9;
     fi
fi 

# Retrieve to port number from the temporary virtual host file
project_port="$(cat $package_directory/rainbow.conf/latest_vhost | grep -i ".*\< *VirtualHost.*\:.*\>\ *" | sed 's/#.*//g' | sed 's/.*\: *\([0-9]*\) *\>.*/\1/g')"
# Store the name of the directory which conatins the settings.py file as the project name
app_source_package_name="$(find . -iname 'settings.py' | sed 's/.*\/\(.*\)\/settings.py/\1/g')"
# This is the absolute path to the setting.py file for the striped Django project
app_source_directory="$(find . -name 'settings.py' | sed 's/\(.*\)\/settings.py/\1/g')"
# Get the last modified time for the settings.py file with this project
# Log the new repository locations
cd $app_source_directory

new_repo_modifiy_time="$(ls -l --time-style=+%m%d%Y%H%M%S settings.py | cut -d' ' -f6)"

if $need_stored_entry; then
   juju-log "First time project initialization detected. Adding to entries in stored_settings."
   echo "$repo_dir $app_url $new_repo_modifiy_time" >> $package_directory/rainbow.conf/installed_projects
fi

# This will tell us if the settings.py file has been modified. There is no need to update the database if not.
if $need_stored_entry || [ -n "$update_database" -o "$new_repo_modifiy_time" != "$repo_modifiy_time" ]; then
   juju-log "settings.py file has been changed in project $app_source_package_name or option [always-update-database] is set to non-empty in the yaml."
   juju-log "Retreiving project database credentials..."
   # Log the new modified time for this settings.py file by replacing the line in installed_projects.

   # This is a work around. Without the testing the hook will error
   if [ -z "$(grep -v "$repo_dir" $package_directory/rainbow.conf/installed_projects 2>> $log_file_rev)" ]; then
        echo "$repo_dir $app_url $new_repo_modifiy_time" > $package_directory/rainbow.conf/installed_projects
   else
        echo "$repo_dir $app_url $new_repo_modifiy_time" > $package_directory/rainbow.conf/installed_projects_temp
        grep -v "$repo_dir" $package_directory/rainbow.conf/installed_projects >> $package_directory/rainbow.conf/installed_projects_temp
        mv -f $package_directory/rainbow.conf/installed_projects_temp $package_directory/rainbow.conf/installed_projects
   fi

   # Parse the project settings.py file for information
   database_engine="$(cat $(find . -name 'settings.py') | grep -xv " *#.*" | grep ".*ENGINE'\ *:.*" | sed 's/#.*//g' | sed "s/.*ENGINE' *\: *[\']\(.*\)[\']\ *[\,]*\ */\1/g" | sed 's/.*backends\.\(.*\)/\1/g')"
   database_name="$(cat $(find . -name 'settings.py') | grep -xv " *#.*" | grep ".*NAME'\ *:.*" | sed 's/#.*//g' | sed "s/.*NAME' *\: *[\']\(.*\)[\']\ *[\,]*\ */\1/g")" 
   database_user="$(cat $(find . -name 'settings.py') | grep -xv " *#.*" | grep ".*USER'\ *:.*" | sed 's/#.*//g' | sed "s/.*USER' *\: *[\']\(.*\)[\']\ *[\,]*\ */\1/g")" 
   database_pass="$(cat $(find . -name 'settings.py') | grep -xv " *#.*" | grep ".*PASSWORD'\ *:.*" | sed 's/#.*//g' | sed "s/.*PASSWORD' *\: *[\']\(.*\)[\']\ *[\,]*\ */\1/g")" 
   database_host="$(cat $(find . -name 'settings.py') | grep -xv " *#.*" | grep ".*HOST'\ *:.*" | sed 's/#.*//g' | sed "s/.*HOST' *\: *[\']\(.*\)[\']\ *[\,]*\ */\1/g")" 
   # Todo: Figure the Django port thing out with databases
   #database_port="$(cat $(find . -name 'settings.py') | grep -xv " *#.*" | grep ".*PORT'\ *:.*" | sed 's/#.*//g' | sed "s/.*PORT' *\: *[\']\(.*\)[\']\ *[\,]*\ */\1/g")" 
   # This is used for the django sites framework
   if [ "$database_engine" != "mysql" ]; then
        juju-log "Critical error. Django-rainbow only supports mysql but project $app_source_package_name uses $database_engine as its database engine"
        exit 9;
   fi
   [ -z "$database_host" ] && database_host="localhost"
                            # database_host=`unit-get private-address`
   # Determine if a database needs to be created for this service
   # Get the mysql password that was generated by the install hook
   password=`cat /var/lib/juju/mysql.passwd`
   existing_databases="$(mysql --user="root" --password="$password" --silent --execute 'show databases')"
   database_exists=false
   for db in $existing_databases; do
       if [ "$db" = "$database_name" ]; then
            juju-log "Found Database $database_name."
            database_exists=true
            break;
       fi
   done;
   if ! $database_exists; then
      juju-log "Creating new database"
      mysqladmin --password="$password" create "$database_name"
      echo "grant all on $database_name.* to '$database_user'@'$database_host' identified by '$database_pass'" | mysql --user=root --password="$password" --database="$database_name"
   fi 

   if ( ! python manage.py syncdb --noinput 2>> $log_file_rev ); then
        juju-log "Unable to sync database $database_name with project. Re-issuing credentials."
        # User needs to be re-created if the database got corrupted. This happens whhen a database restore sets old user data.
        echo "drop user '$database_user'@'$database_host'" | mysql --user=root --password="$password" --database="$database_name"
        echo "grant all on $database_name.* to '$database_user'@'$database_host' identified by '$database_pass'" | mysql --user=root --password="$password" --database="$database_name"
        if ( ! python manage.py syncdb --noinput ); then
            juju-log "Unable to set username and password from Django project. Quitting."
            exit 9;
        fi
   fi

fi  #Endo if [ "$($need_stored_entry)" -o "$(ls -l --time-style=+%m%d%Y%H%M%S $app_source_directory/settings.py | cut -d' ' -f6)" != "$repo_modifiy_time" ]


open-port $project_port/tcp
#open-port 8080/tcp

cp $package_directory/rainbow.conf/latest_vhost /etc/apache2/sites-available/vhost_$app_source_package_name

# This is causing prolems with the repo pull, owner permissions needs to be a trusted user.
# Also, I believe the permissions from development to here is maintained in a mercurial repository
# chown -R www-data "$repo_dir"

site_id="$(cat $(find . -name 'settings.py') | grep -xv " *#.*" | grep ".*SITE_ID\ *=.*" | sed 's/#.*//g' | sed "s/.*SITE_ID *\= *\(.*\) */\1/g" | sed "s/'//g")"
sites_used="$(cat $(find . -name 'settings.py') | grep -xv " *#.*" | grep ".*django.contrib.sites.*" | sed 's/#.*//g')"


$upadate_sites || 
# Create or load django sites with a fixture file
if [ -n "$sites_used" -a -n "$site_id" ]; then
     juju-log "Found django.contrib.sites in installed apps and a SITE_ID set for project $app_source_package_name."
     if [ -z "$project_site_name" -o -z "$project_site_domain" ]; then
          juju-log "Sites framwork has been defined in your settings.py file, but site domain and/or name was not provided in the config."
          juju-log "Skipping sites framwork. This can be added in the admin cosole as well."
     elif $need_stored_entry || [ -n "$update_sites" ]; then                   
          juju-log "Adding the fixture table entry for $database_name in $(pwd)/site_fixture.yaml"
          # Change the site table entry in the fixture file
          touch site_fixture.yaml
          need_entry=true
          IFS="$(echo -e "\n\r")"
          while read -r line; do
                if [[ "${line}" =~ "pk: ${site_id}" ]]; then
                      need_entry=false
                      echo "${line}" >> site_fixture.yaml.new
                      read -r fieldLine
                      echo "${fieldLine}" >> site_fixture.yaml.new
                      read -r domainLine
                      echo "${domainLine/: */: ${project_site_domain}}" >> site_fixture.yaml.new
                      read -r nameLine
                      echo "${nameLine/: */: ${project_site_name}}" >> site_fixture.yaml.new
                else
                      echo "$line" >> site_fixture.yaml.new
                fi
          done < site_fixture.yaml
          unset IFS
          if $need_entry; then
             echo '- model: sites.site
  pk: '"$site_id"'
  fields:
    domain: '"$project_site_domain"'
    name: '"$project_site_name"'' >> site_fixture.yaml.new
          fi
          mv -f site_fixture.yaml site_fixture.yaml.old
          mv -f site_fixture.yaml.new site_fixture.yaml
          # Load our sites model from the new fixtures file for this project
          ! python manage.py loaddata site_fixture.yaml 2>> $log_file_rev && juju-log "Unable to load fixture data from $(pwd)/site_fixture.yaml"
          # Load any other fixtures located in the project 
          ! python manage.py loaddata 2>> $log_file_rev && juju-log "Unable to load any other fixture files from project $app_source_package_name"
     fi
fi

juju-log "Enabling virtual host vhost_$app_source_package_name"
a2ensite vhost_$app_source_package_name

juju-log "Restarting Apache2 gracefully"
apache2ctl -k graceful

juju-log "Done"



