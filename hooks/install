#!/bin/bash

# Created by Robert Edward Steckroth II, RobertSteckroth@gmail.com

set -e # -x for verbose logging to juju debug-log
IFS="$(echo -e "\n\r")"

juju-log "Starting installation of Django-rainbow"

native_packages=`config-get rainbow-packages`
reinstall_mysql=`config-get re-install-mysql-server`
purge_instance=`config-get purge-instance`
package_directory=`config-get rainbow-installation-directory`
# Remove tralling slash at the end for consitancy
package_directory="$(echo $package_directory | sed 's/\(.*\)\/$/\1/g')"

# This will be used for critacal error loging with the revision number
log_file_rev="$package_directory/logs/install_revision_$(cat revision).log"

if ! [ -d "$package_directory" ]; then
       if ( ! mkdir -p $package_directory 2>> $log_file_rev ); then
          # Not gonna allow bad package installation directory
            package_directory="/var/lib/django-rainbow"
            mkdir -p $package_directory
       fi
fi

# Create the directory for charm logging
if ! [ -d "$package_directory/logs" ]; then
       mkdir -p $package_directory/logs
fi

if ! [ -d "$package_directory/site_packages" ]; then
       mkdir -p $package_directory/site_packages
fi

if ! [ -d "$package_directory/rainbow.conf" ]; then
       mkdir -p $package_directory/rainbow.conf
fi

# Gonna store our packages case of a service destroy
if ! [ -e "$package_directory/rainbow.conf/installed_packages" ]; then
       touch $package_directory/rainbow.conf/installed_packages
fi

# Gonna store our packages case of a service destroy
if ! [ -e "$package_directory/rainbow.conf/installed_projects" ]; then
       touch $package_directory/rainbow.conf/installed_projects
fi

# This will create the fixture yaml file to populate the sites framework 
if ! [ -e "$package_directory/rainbow.conf/site_fixture.yaml" ]; then
       touch $package_directory/rainbow.conf/site_fixture.yaml
fi



# Store and remove packages if specified in config with "purge_instance"
if [ -n "$purge_instance" ]; then
     juju-log "Purging instance"
     # installed_packages file now contains any packages to be removed from previous install

     # Remove all debian packages installed with apt-get
     for remove_pkg in $(cat $package_directory/rainbow.conf/installed_packages); do
         [ -z "$remove_pkg" ] && continue     # Dont need empty data
         # Can't have spaces either
         remove_pkg="$(echo "$remove_pkg" | sed 's/\ *//g')"
         juju-log "Removing package $remove_pkg"
         apt-get -qqy purge $remove_pkg
     done;

     # This will remove Django and python packages from the python directory
     ( ! rm -r /usr/local/lib/python2.7/dist-packages/ 2>> $log_file_rev ) && juju-log "Could not remove python packages at /usr/local/lib/python2.7/dist-packages/" 
     # Delete the site_packages directory sense we removed all of the dist-packages
     ( ! rm -r $package_directory/site_packages/* 2>> $log_file_rev ) && juju-log "Could not remove python packages at $package_directory/site_packages" 
     
     # Clear out the installed_packages file
     echo "" > $package_directory/rainbow.conf/installed_packages

fi # Endo if [ -n "$purge_instance" ]; then

# Add all packages to the installed_packages file for next run re-installation

# Install stock packages
juju-log "Installing $native_packages via apt-get"
apt-get -qqy install $native_packages

# Put the native rainbow packages into the installed file
echo "" > $package_directory/rainbow.conf/newly_installed_packages
for pkg in $native_packages; do
    echo "$pkg" >> $package_directory/rainbow.conf/newly_installed_packages
done;

new_list="$(comm -13 <(sort $package_directory/rainbow.conf/installed_packages) <(sort $package_directory/rainbow.conf/newly_installed_packages))"
for package_entry in $new_list; do
    echo $package_entry >> $package_directory/rainbow.conf/installed_packages
done

juju-log "Checking for mysql-server..."
if ( dpkg -s mysql-server | grep installed 2>> $log_file_rev ); then
     juju-log "...installed"
     package=true
else
     juju-log "...not installed"
     package=false
fi 


if ! $package || [ -n "$reinstall_mysql" ]; then
     if $package; then
        juju-log "Removing mysql client and all settings"
        apt-get -qqy purge debconf-utils mysql-client-core-5.5 mysql-server 
     fi
     juju-log "Installing mysql-server and client"
     apt-get -qqy install mysql-client-core-5.5 debconf-utils
     # Generate a strong root password for the mysql service, using /dev/urandom
     PASSWORD=`pwgen 10 1`
     # Store the password for later use by the rainbow-relation-changed hook for this service unit.
     echo $PASSWORD > /var/lib/juju/mysql.passwd
     chown root:root /var/lib/juju/mysql.passwd
     chmod 660 /var/lib/juju/mysql.passwd
     echo mysql-server-5.1 mysql-server/root_password password $PASSWORD | debconf-set-selections
     echo mysql-server-5.1 mysql-server/root_password_again password $PASSWORD | debconf-set-selections
     juju-log "mysql-server settings preseeded, now installing via apt-get"
     DEBIAN_FRONTEND=noninteractive apt-get -y install -qq mysql-server
     juju-log "Restarting mysql"
     /etc/init.d/mysql restart
fi


a2dissite default
/etc/init.d/apache2 restart


